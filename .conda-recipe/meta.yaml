{% if GIT_DESCRIBE_NUMBER > '0' %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] + '.post' + GIT_DESCRIBE_NUMBER %}
{% else %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] %}
{% endif %}
{% set PKG_NAME = 'teensy-minimal-rpc' %}
{% set LIB_NAME = 'TeensyMinimalRpc' %}
{% set MODULE_NAME = PKG_NAME.replace('-', '_') %}
package:
  name: {{ PKG_NAME }}
  version: {{ GIT_VERSION }}

build:
  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  number: 0
  noarch: python
  script:
    # Copy Arduino library to Conda include directory and generate Arduino `library.properties` file
    - python file_handler.py {{ SRC_DIR }} {{ PREFIX }} {{ PKG_NAME }} {{ MODULE_NAME }} {{ LIB_NAME }}
    # Run setup
    - python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - python {{ python }}
    - path-helpers
    - conda-helpers
    - platformio-helpers
    - base-node-rpc
    - dropbot-headers
    - pip

#     Split into `noarch` C++ header package and platform-specific Python
#     package.
outputs:
  - name: {{ PKG_NAME }}-dev
    noarch: generic
    files:
      - share
    requirements:
      run:
        - platformio
        - dropbot-headers
  - name: {{ PKG_NAME }}
    noarch: python
    files:
      - {{ SP_DIR }}/{{ MODULE_NAME }}
    requirements:
      run:
        - python >=3.6
        - {{ pin_subpackage(PKG_NAME + '-dev', max_pin='x.x') }}
        - path-helpers
        - conda-helpers
        - platformio-helpers
        - base-node-rpc

test:
  imports:
    - {{ MODULE_NAME }}
    - {{ MODULE_NAME + '.ADC' }}
    - {{ MODULE_NAME + '.DMA' }}
    - {{ MODULE_NAME + '.PIT' }}
    - {{ MODULE_NAME + '.SIM' }}
    - {{ MODULE_NAME + '.adc_sampler' }}
    - {{ MODULE_NAME + '.config' }}
    - {{ MODULE_NAME + '.node' }}
    - {{ MODULE_NAME + '.proxy' }}
    - {{ MODULE_NAME + '.state' }}

about:
  home: https://github.com/sci-bots/{{ PKG_NAME }}
  license: MIT
  summary: Template project demonstrating use of Arduino base node RPC framework.

# source will be downloaded prior to filling in jinja templates
# Example assumes that this folder has setup.py in it
source:
  git_url: ../
#  path: ..